# Giải thích chi tiết luồng chức năng frontend (clothing-ecommerce)

## 1. Luồng xác thực (Authentication Flow)

### a. Đăng ký (Register)
- Người dùng nhập thông tin (email, mật khẩu, họ tên, số điện thoại, địa chỉ) trên form đăng ký.
- Gọi hàm `authAPI.register(userData)` để gửi dữ liệu lên backend.
- Nếu thành công, hiển thị thông báo và chuyển sang trang đăng nhập.

### b. Đăng nhập (Login)
- Người dùng nhập email và mật khẩu.
- Gọi `authAPI.login(credentials)` để gửi thông tin lên backend.
- Nếu thành công, backend trả về `token` (access token) và `refreshToken`.
- Frontend lưu 2 token này vào localStorage:
  - `localStorage.setItem("token", ...)`
  - `localStorage.setItem("refreshToken", ...)`
- Cập nhật Redux state: user, token, refreshToken, isAuthenticated.
- Hiển thị thông báo đăng nhập thành công, chuyển hướng sang trang chính.

### c. Làm mới token (Refresh Token)
- Khi access token hết hạn (ví dụ: sau 5s khi test), nếu gọi API bị lỗi 401, frontend sẽ lấy `refreshToken` từ localStorage và gọi `authAPI.refreshToken(refreshToken)`.
- Nếu backend trả về access token mới, frontend cập nhật lại localStorage và Redux state.
- Nếu refresh token cũng hết hạn hoặc không hợp lệ, buộc người dùng đăng nhập lại.

### d. Đăng xuất (Logout)
- Khi người dùng chọn đăng xuất, frontend gọi `authAPI.logout()` (gửi refreshToken lên backend).
- Backend xóa refreshToken khỏi DB.
- Frontend xóa token và refreshToken khỏi localStorage, cập nhật Redux state, chuyển hướng về trang đăng nhập.

---

## 2. Quản lý state với Redux

- Sử dụng Redux Toolkit để quản lý state toàn cục.
- `authSlice.js` quản lý trạng thái xác thực: user, token, refreshToken, isAuthenticated, isLoading, error.
- Các slice khác quản lý sản phẩm, giỏ hàng, đơn hàng, v.v.
- Sử dụng `createAsyncThunk` để xử lý các tác vụ bất đồng bộ (gọi API).

---

## 3. Giao tiếp API

- Tất cả các request API được thực hiện qua các file trong `src/services/` (ví dụ: `authAPI.js`, `productAPI.js`).
- Sử dụng axios để gửi request.
- Các hàm API trả về Promise, được sử dụng trong các thunk của Redux.

---

## 4. Luồng hiển thị sản phẩm, giỏ hàng, đặt hàng, profile

- **Sản phẩm:**  
  - Trang sản phẩm gọi API lấy danh sách sản phẩm, hiển thị grid sản phẩm, hỗ trợ lọc, tìm kiếm, phân trang.
- **Chi tiết sản phẩm:**  
  - Khi click vào sản phẩm, gọi API lấy chi tiết, hiển thị thông tin, cho phép thêm vào giỏ hàng.
- **Giỏ hàng:**  
  - Lưu trữ giỏ hàng trong Redux, có thể đồng bộ với backend nếu đã đăng nhập.
  - Cho phép cập nhật số lượng, xóa sản phẩm, chuyển sang trang thanh toán.
- **Đặt hàng:**  
  - Khi đặt hàng, gửi thông tin lên backend, nhận kết quả và hiển thị thông báo.
- **Profile:**  
  - Gọi API lấy thông tin user, cho phép cập nhật thông tin cá nhân, đổi mật khẩu.

---

## 5. Bảo vệ route, kiểm tra đăng nhập

- Các route cần đăng nhập sẽ kiểm tra `isAuthenticated` từ Redux state.
- Nếu chưa đăng nhập, tự động chuyển hướng về trang đăng nhập.
- Có thể sử dụng HOC hoặc custom hook để bảo vệ route.

---

## 6. Lưu trữ token, xử lý khi token hết hạn

- Token và refreshToken được lưu ở localStorage.
- Khi gọi API, luôn lấy token từ localStorage để gắn vào header Authorization.
- Khi token hết hạn, tự động gọi API refresh token để lấy token mới.

---

## 7. Các component chính và vai trò

- **ProductGrid, ProductFilters, Pagination:** Hiển thị và lọc sản phẩm.
- **Header, Footer:** Thanh điều hướng, thông tin chung.
- **AuthForm:** Form đăng nhập/đăng ký.
- **Cart, Checkout:** Quản lý và xử lý giỏ hàng, đặt hàng.
- **Profile:** Quản lý thông tin cá nhân.

---

## 8. Thông báo và xử lý lỗi

- Sử dụng `react-toastify` để hiển thị thông báo thành công/thất bại.
- Xử lý lỗi API và hiển thị thông báo cho người dùng.

---

## 9. Tóm tắt luồng hoạt động

1. Người dùng truy cập web, có thể xem sản phẩm, tìm kiếm, lọc.
2. Khi cần mua hàng hoặc truy cập trang cá nhân, phải đăng nhập.
3. Đăng nhập thành công, token được lưu, các API sau đó đều gửi kèm token.
4. Khi token hết hạn, tự động làm mới bằng refresh token.
5. Đăng xuất sẽ xóa token, refreshToken, và chuyển về trang đăng nhập.

---

Nếu bạn muốn giải thích chi tiết hơn về bất kỳ phần nào, hãy yêu cầu cụ thể!
