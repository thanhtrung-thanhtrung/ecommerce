import { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import { Formik, Form, Field, ErrorMessage } from "formik";
import * as Yup from "yup";
import { getUserProfile } from "../../store/slices/authSlice";
import userAPI from "../../services/userAPI";
import { toast } from "react-toastify";

const ProfilePage = () => {
  const dispatch = useDispatch();
  const { user, isLoading } = useSelector((state) => state.auth);
  const [activeTab, setActiveTab] = useState("profile");
  const [isUpdating, setIsUpdating] = useState(false);

  useEffect(() => {
    dispatch(getUserProfile());
  }, [dispatch]);

  const profileValidationSchema = Yup.object({
    HoTen: Yup.string()
      .min(2, "H·ªç t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±")
      .required("Vui l√≤ng nh·∫≠p h·ªç t√™n"),
    SDT: Yup.string()
      .matches(/^[0-9]{10,11}$/, "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá")
      .required("Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"),
    DiaChi: Yup.string()
      .min(10, "ƒê·ªãa ch·ªâ ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±")
      .required("Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ"),
  });

  const passwordValidationSchema = Yup.object({
    matKhauCu: Yup.string().required("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u c≈©"),
    matKhauMoi: Yup.string()
      .min(6, "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±")
      .required("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u m·ªõi"),
    xacNhanMatKhau: Yup.string()
      .oneOf([Yup.ref("matKhauMoi"), null], "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp")
      .required("Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u"),
  });

  const handleUpdateProfile = async (values) => {
    setIsUpdating(true);
    try {
      await userAPI.updateProfile(values);
      toast.success("C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!");
      dispatch(getUserProfile());
    } catch (error) {
      toast.error(error.response?.data?.message || "C·∫≠p nh·∫≠t th·∫•t b·∫°i");
    } finally {
      setIsUpdating(false);
    }
  };

  const handleChangePassword = async (values, { resetForm }) => {
    setIsUpdating(true);
    try {
      await userAPI.changePassword(values);
      toast.success("ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!");
      resetForm();
    } catch (error) {
      toast.error(error.response?.data?.message || "ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i");
    } finally {
      setIsUpdating(false);
    }
  };

  if (isLoading) {
    return (
      <div className="container mx-auto px-4 py-12">
        <div className="flex justify-center">
          <div className="spinner"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold text-gray-800 mb-8">
        Th√¥ng tin c√° nh√¢n
      </h1>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
        {/* Sidebar */}
        <div className="lg:col-span-1">
          <div className="card">
            <div className="text-center mb-6">
              <div className="w-20 h-20 bg-primary-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-2xl">üë§</span>
              </div>
              <h3 className="font-semibold text-gray-800">{user?.HoTen}</h3>
              <p className="text-gray-600 text-sm">{user?.Email}</p>
            </div>

            <nav className="space-y-2">
              <button
                onClick={() => setActiveTab("profile")}
                className={`w-full text-left px-4 py-2 rounded-lg transition-colors ${
                  activeTab === "profile"
                    ? "bg-primary-100 text-primary-600"
                    : "text-gray-700 hover:bg-gray-100"
                }`}
              >
                Th√¥ng tin c√° nh√¢n
              </button>
              <button
                onClick={() => setActiveTab("password")}
                className={`w-full text-left px-4 py-2 rounded-lg transition-colors ${
                  activeTab === "password"
                    ? "bg-primary-100 text-primary-600"
                    : "text-gray-700 hover:bg-gray-100"
                }`}
              >
                ƒê·ªïi m·∫≠t kh·∫©u
              </button>
              <button
                onClick={() => setActiveTab("addresses")}
                className={`w-full text-left px-4 py-2 rounded-lg transition-colors ${
                  activeTab === "addresses"
                    ? "bg-primary-100 text-primary-600"
                    : "text-gray-700 hover:bg-gray-100"
                }`}
              >
                ƒê·ªãa ch·ªâ giao h√†ng
              </button>
            </nav>
          </div>
        </div>

        {/* Content */}
        <div className="lg:col-span-3">
          {activeTab === "profile" && (
            <div className="card">
              <h2 className="text-xl font-semibold text-gray-800 mb-6">
                C·∫≠p nh·∫≠t th√¥ng tin
              </h2>
              <Formik
                initialValues={{
                  HoTen: user?.HoTen || "",
                  SDT: user?.SDT || "",
                  DiaChi: user?.DiaChi || "",
                }}
                validationSchema={profileValidationSchema}
                onSubmit={handleUpdateProfile}
                enableReinitialize
              >
                {({ isSubmitting }) => (
                  <Form className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <label className="form-label">H·ªç v√† t√™n</label>
                        <Field name="HoTen" className="form-input" />
                        <ErrorMessage
                          name="HoTen"
                          component="div"
                          className="form-error"
                        />
                      </div>
                      <div>
                        <label className="form-label">Email</label>
                        <input
                          value={user?.Email || ""}
                          disabled
                          className="form-input bg-gray-100"
                        />
                        <p className="text-sm text-gray-500 mt-1">
                          Email kh√¥ng th·ªÉ thay ƒë·ªïi
                        </p>
                      </div>
                      <div>
                        <label className="form-label">S·ªë ƒëi·ªán tho·∫°i</label>
                        <Field name="SDT" className="form-input" />
                        <ErrorMessage
                          name="SDT"
                          component="div"
                          className="form-error"
                        />
                      </div>
                      <div className="md:col-span-2">
                        <label className="form-label">ƒê·ªãa ch·ªâ</label>
                        <Field name="DiaChi" className="form-input" />
                        <ErrorMessage
                          name="DiaChi"
                          component="div"
                          className="form-error"
                        />
                      </div>
                    </div>

                    <div className="flex justify-end">
                      <button
                        type="submit"
                        disabled={isSubmitting || isUpdating}
                        className="btn-primary"
                      >
                        {isUpdating ? "ƒêang c·∫≠p nh·∫≠t..." : "C·∫≠p nh·∫≠t"}
                      </button>
                    </div>
                  </Form>
                )}
              </Formik>
            </div>
          )}

          {activeTab === "password" && (
            <div className="card">
              <h2 className="text-xl font-semibold text-gray-800 mb-6">
                ƒê·ªïi m·∫≠t kh·∫©u
              </h2>
              <Formik
                initialValues={{
                  matKhauCu: "",
                  matKhauMoi: "",
                  xacNhanMatKhau: "",
                }}
                validationSchema={passwordValidationSchema}
                onSubmit={handleChangePassword}
              >
                {({ isSubmitting }) => (
                  <Form className="space-y-6">
                    <div>
                      <label className="form-label">M·∫≠t kh·∫©u c≈©</label>
                      <Field
                        name="matKhauCu"
                        type="password"
                        className="form-input"
                      />
                      <ErrorMessage
                        name="matKhauCu"
                        component="div"
                        className="form-error"
                      />
                    </div>
                    <div>
                      <label className="form-label">M·∫≠t kh·∫©u m·ªõi</label>
                      <Field
                        name="matKhauMoi"
                        type="password"
                        className="form-input"
                      />
                      <ErrorMessage
                        name="matKhauMoi"
                        component="div"
                        className="form-error"
                      />
                    </div>
                    <div>
                      <label className="form-label">
                        X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi
                      </label>
                      <Field
                        name="xacNhanMatKhau"
                        type="password"
                        className="form-input"
                      />
                      <ErrorMessage
                        name="xacNhanMatKhau"
                        component="div"
                        className="form-error"
                      />
                    </div>

                    <div className="flex justify-end">
                      <button
                        type="submit"
                        disabled={isSubmitting || isUpdating}
                        className="btn-primary"
                      >
                        {isUpdating ? "ƒêang c·∫≠p nh·∫≠t..." : "ƒê·ªïi m·∫≠t kh·∫©u"}
                      </button>
                    </div>
                  </Form>
                )}
              </Formik>
            </div>
          )}

          {activeTab === "addresses" && (
            <div className="card">
              <h2 className="text-xl font-semibold text-gray-800 mb-6">
                ƒê·ªãa ch·ªâ giao h√†ng
              </h2>
              <div className="text-center py-12">
                <div className="text-4xl mb-4">üè†</div>
                <p className="text-gray-600 mb-4">ƒê·ªãa ch·ªâ hi·ªán t·∫°i:</p>
                <p className="font-medium text-gray-800">
                  {user?.DiaChi || "Ch∆∞a c√≥ ƒë·ªãa ch·ªâ"}
                </p>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ProfilePage;
