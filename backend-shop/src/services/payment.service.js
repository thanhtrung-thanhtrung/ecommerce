const db = require("../config/database");
const crypto = require("crypto");
const qs = require("qs");
const {
  VNPay,
  ignoreLogger,
  ProductCode,
  VnpLocale,
  dateFormat,
} = require("vnpay");

class PaymentService {
  constructor() {
    this.vnpay = new VNPay({
      tmnCode: process.env.VNP_TMN_CODE || "46OBP8RP",
      secureSecret:
        process.env.VNP_HASH_SECRET || "27TBCDYVROCTIFL2X5M4IF7NM8IGWINX",
      vnpayHost:
        process.env.VNP_URL ||
        "https://sandbox.vnpayment.vn/paymentv2/vpcpay.html",
      testMode: true,
      hashAlgorithm: "SHA512",
      loggerFn: ignoreLogger,
    });
  }

  async taoPhuongThucThanhToan(paymentData) {
    const [result] = await db.execute(
      `INSERT INTO hinhthucthanhtoan (Ten, MoTa, TrangThai) VALUES (?, ?, ?)`,
      [paymentData.Ten, paymentData.MoTa || null, paymentData.TrangThai ?? 1]
    );

    return {
      id: result.insertId,
      ...paymentData,
      TrangThai: paymentData.TrangThai ?? 1,
    };
  }

  async capNhatPhuongThucThanhToan(id, paymentData) {
    const [result] = await db.execute(
      `UPDATE hinhthucthanhtoan SET Ten = ?, MoTa = ?, TrangThai = ? WHERE id = ?`,
      [
        paymentData.Ten,
        paymentData.MoTa || null,
        paymentData.TrangThai ?? 1,
        id,
      ]
    );

    if (result.affectedRows === 0) {
      throw new Error("Kh√¥ng t√¨m th·∫•y ph∆∞∆°ng th·ª©c thanh to√°n");
    }

    return this.layChiTietPhuongThucThanhToan(id);
  }

  async xoaPhuongThucThanhToan(id) {
    const [orders] = await db.execute(
      "SELECT COUNT(*) as count FROM donhang WHERE id_ThanhToan = ?",
      [id]
    );

    if (orders[0].count > 0) {
      throw new Error("Kh√¥ng th·ªÉ x√≥a ph∆∞∆°ng th·ª©c thanh to√°n ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng");
    }

    const [result] = await db.execute(
      "DELETE FROM hinhthucthanhtoan WHERE id = ?",
      [id]
    );

    if (result.affectedRows === 0) {
      throw new Error("Kh√¥ng t√¨m th·∫•y ph∆∞∆°ng th·ª©c thanh to√°n");
    }

    return { message: "X√≥a ph∆∞∆°ng th·ª©c thanh to√°n th√†nh c√¥ng" };
  }

  async capNhatTrangThai(id, trangThai) {
    const [result] = await db.execute(
      "UPDATE hinhthucthanhtoan SET TrangThai = ? WHERE id = ?",
      [trangThai, id]
    );

    if (result.affectedRows === 0) {
      throw new Error("Kh√¥ng t√¨m th·∫•y ph∆∞∆°ng th·ª©c thanh to√°n");
    }

    return { id, TrangThai: trangThai };
  }

  async layChiTietPhuongThucThanhToan(id) {
    const [methods] = await db.execute(
      "SELECT * FROM hinhthucthanhtoan WHERE id = ?",
      [id]
    );

    if (methods.length === 0) {
      throw new Error("Kh√¥ng t√¨m th·∫•y ph∆∞∆°ng th·ª©c thanh to√°n");
    }

    return methods[0];
  }

  async layDanhSachPhuongThucThanhToan(filters = {}) {
    let query = "SELECT * FROM hinhthucthanhtoan WHERE 1=1";
    const params = [];

    if (filters.trangThai !== undefined) {
      query += " AND TrangThai = ?";
      params.push(filters.trangThai);
    }

    if (filters.tuKhoa) {
      query += " AND (Ten LIKE ? OR MoTa LIKE ?)";
      const searchTerm = `%${filters.tuKhoa}%`;
      params.push(searchTerm, searchTerm);
    }

    query += " ORDER BY id DESC";

    const [methods] = await db.execute(query, params);
    return methods;
  }

  async createPayment(
    orderId,
    userId,
    paymentMethodId,
    clientIp = "127.0.0.1"
  ) {
    orderId = orderId ?? null;
    userId = userId ?? null;
    paymentMethodId = paymentMethodId ?? null;

    // ‚úÖ S·ª¨A: Ki·ªÉm tra ƒë∆°n h√†ng t·ªìn t·∫°i tr∆∞·ªõc
    const [orderExists] = await db.execute(
      "SELECT * FROM donhang WHERE id = ?",
      [orderId]
    );

    if (orderExists.length === 0) {
      throw new Error(
        `ƒê∆°n h√†ng v·ªõi ID ${orderId} kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng`
      );
    }

    const order = orderExists[0];

    // ‚úÖ S·ª¨A: Logic linh ho·∫°t cho c·∫£ guest v√† logged user
    // Ch·ªâ c·∫ßn ƒë·∫£m b·∫£o ng∆∞·ªùi thanh to√°n c√≥ quy·ªÅn v·ªõi ƒë∆°n h√†ng n√†y
    if (userId && order.id_NguoiMua && order.id_NguoiMua !== userId) {
      throw new Error("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ƒë∆°n h√†ng n√†y");
    }

    // Cho ph√©p guest user thanh to√°n b·∫•t k·ª≥ ƒë∆°n h√†ng n√†o (tr·ª´ tr∆∞·ªùng h·ª£p tr√™n)
    // Cho ph√©p logged user thanh to√°n ƒë∆°n h√†ng c·ªßa h·ªç ho·∫∑c ƒë∆°n h√†ng guest

    if (order.TrangThai !== 1) {
      throw new Error("ƒê∆°n h√†ng kh√¥ng ·ªü tr·∫°ng th√°i ch·ªù thanh to√°n");
    }

    const [paymentMethods] = await db.execute(
      "SELECT * FROM hinhthucthanhtoan WHERE id = ? AND TrangThai = 1",
      [paymentMethodId]
    );

    if (paymentMethods.length === 0) {
      throw new Error(
        "Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ b·ªã v√¥ hi·ªáu h√≥a"
      );
    }

    const paymentMethod = paymentMethods[0];
    let paymentData = {};

    switch (paymentMethod.Ten) {
      case "VNPay":
        paymentData = await this.createVNPayPayment(order, clientIp);
        break;
      case "Ti·ªÅn m·∫∑t m·∫∑t ":
      case "COD":
        // COD ch·ªâ c·∫ßn c√≥ th√¥ng tin li√™n l·∫°c
        if (!order.EmailNguoiNhan || !order.SDTNguoiNhan) {
          throw new Error("COD y√™u c·∫ßu th√¥ng tin li√™n l·∫°c h·ª£p l·ªá");
        }
        await db.execute("UPDATE donhang SET TrangThai = ? WHERE id = ?", [
          2,
          orderId,
        ]);
        paymentData = { message: "ƒê·∫∑t h√†ng th√†nh c√¥ng v·ªõi thanh to√°n COD" };
        break;
      default:
        throw new Error("Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£");
    }

    return paymentData;
  }

  async createVNPayPayment(order, clientIp = "127.0.0.1") {
    try {
      const orderId = order.id.toString();
      const amount = Math.floor(parseFloat(order.TongThanhToan) || 0);

      if (amount <= 0 || amount < 5000) {
        throw new Error(
          "S·ªë ti·ªÅn thanh to√°n t·ªëi thi·ªÉu l√† 5,000 VND cho VNPay sandbox"
        );
      }

      const now = new Date();
      const expire = new Date(now.getTime() + 15 * 60 * 1000);

      // ‚úÖ S·ª¨A: C·∫≠p nh·∫≠t return URL v·ªÅ ƒë√∫ng port customer
      const customerReturnUrl = "http://localhost:5714/vnpay-return";

      console.log("üîó VNPay FORCED Customer Return URL:", customerReturnUrl);
      console.log("üéØ Order ID:", orderId, "Amount:", amount);
      console.log(
        "‚ö†Ô∏è  NOTICE: All VNPay returns will go to CUSTOMER frontend (port 5714) only"
      );

      const paymentUrl = await this.vnpay.buildPaymentUrl({
        vnp_Amount: amount,
        vnp_IpAddr: clientIp,
        vnp_TxnRef: orderId,
        vnp_OrderInfo: `Thanh toan don hang ${orderId}`,
        vnp_OrderType: ProductCode.Other,
        vnp_ReturnUrl: customerReturnUrl, // FORCED customer URL - port 5714
        vnp_Locale: VnpLocale.VN,
        vnp_CreateDate: dateFormat(now),
        vnp_ExpireDate: dateFormat(expire),
      });

      console.log("‚úÖ VNPay Payment URL created:", paymentUrl);
      console.log("üîÑ This URL will return to:", customerReturnUrl);

      return {
        success: true,
        paymentUrl,
        orderId,
        amount,
        message: "T·∫°o URL thanh to√°n VNPay th√†nh c√¥ng",
      };
    } catch (error) {
      throw new Error(`L·ªói t·∫°o thanh to√°n VNPay: ${error.message}`);
    }
  }

  async handleVNPayIPN(ipnData) {
    try {
      const isValid = this.vnpay.verifyReturnUrl(ipnData);

      if (!isValid) return { RspCode: "97", Message: "Invalid signature" };

      const orderId = ipnData.vnp_TxnRef;
      const rspCode = ipnData.vnp_ResponseCode;
      const amount = parseInt(ipnData.vnp_Amount) / 100;

      const [orders] = await db.execute("SELECT * FROM donhang WHERE id = ?", [
        orderId,
      ]);
      if (orders.length === 0)
        return { RspCode: "01", Message: "Order not found" };

      const order = orders[0];
      if (Math.abs(order.TongThanhToan - amount) > 1) {
        return { RspCode: "04", Message: "Invalid amount" };
      }

      if (rspCode === "00") {
        await db.execute(
          `UPDATE donhang SET TrangThai = 2, TrangThaiThanhToan = 1, ThoiGianThanhToan = NOW() WHERE id = ?`,
          [order.id]
        );
      } else {
        await db.execute(
          `UPDATE donhang SET TrangThai = 5, TrangThaiThanhToan = 0, LyDoHuy = ? WHERE id = ?`,
          [`Thanh to√°n VNPay th·∫•t b·∫°i - M√£ l·ªói: ${rspCode}`, order.id]
        );
      }

      return { RspCode: "00", Message: "Confirm Success" };
    } catch (error) {
      return { RspCode: "99", Message: "Unknown error" };
    }
  }

  async handleVNPayReturn(returnData) {
    try {
      const isValid = this.vnpay.verifyReturnUrl(returnData);
      if (!isValid) return { success: false, message: "Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá" };

      const orderId = returnData.vnp_TxnRef;
      const rspCode = returnData.vnp_ResponseCode;
      const amount = parseInt(returnData.vnp_Amount) / 100;

      console.log("üîÑ VNPay Return Processing:", {
        orderId,
        rspCode,
        amount,
        isValid,
      });

      const [orders] = await db.execute("SELECT * FROM donhang WHERE id = ?", [
        orderId,
      ]);
      if (orders.length === 0) {
        return { success: false, message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng", orderId };
      }

      const order = orders[0];

      // ‚úÖ S·ª¨A: C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng d·ª±a tr√™n k·∫øt qu·∫£ VNPay
      if (rspCode === "00") {
        // Thanh to√°n th√†nh c√¥ng - c·∫≠p nh·∫≠t tr·∫°ng th√°i
        await db.execute(
          `UPDATE donhang SET 
            TrangThai = 2, 
            TrangThaiThanhToan = 1, 
            ThoiGianThanhToan = NOW() 
           WHERE id = ?`,
          [orderId]
        );

        console.log("‚úÖ Payment Success - Order updated:", {
          orderId,
          newStatus: 2,
          paymentStatus: 1,
        });
      } else {
        // Thanh to√°n th·∫•t b·∫°i - ƒë√°nh d·∫•u th·∫•t b·∫°i
        await db.execute(
          `UPDATE donhang SET 
            TrangThai = 5, 
            TrangThaiThanhToan = 2, 
            LyDoHuy = ? 
           WHERE id = ?`,
          [`Thanh to√°n VNPay th·∫•t b·∫°i - M√£ l·ªói: ${rspCode}`, orderId]
        );

        console.log("‚ùå Payment Failed - Order updated:", {
          orderId,
          newStatus: 5,
          paymentStatus: 2,
          errorCode: rspCode,
        });
      }

      // L·∫•y l·∫°i th√¥ng tin ƒë∆°n h√†ng sau khi c·∫≠p nh·∫≠t
      const [updatedOrders] = await db.execute(
        "SELECT * FROM donhang WHERE id = ?",
        [orderId]
      );
      const updatedOrder = updatedOrders[0];

      const response = {
        orderId,
        amount,
        order: {
          id: updatedOrder.id,
          MaDonHang: updatedOrder.MaDonHang,
          TrangThai: updatedOrder.TrangThai,
          TrangThaiThanhToan: updatedOrder.TrangThaiThanhToan,
          TongThanhToan: updatedOrder.TongThanhToan,
          TenNguoiNhan: updatedOrder.TenNguoiNhan,
          EmailNguoiNhan: updatedOrder.EmailNguoiNhan,
          DiaChiNhan: updatedOrder.DiaChiNhan,
        },
      };

      return rspCode === "00"
        ? { success: true, message: "Thanh to√°n th√†nh c√¥ng", ...response }
        : {
            success: false,
            message: this.getVNPayErrorMessage(rspCode),
            code: rspCode,
            ...response,
          };
    } catch (error) {
      console.error("‚ùå VNPay Return Handler Error:", error);
      return {
        success: false,
        message: "L·ªói x·ª≠ l√Ω k·∫øt qu·∫£ thanh to√°n",
        error: error.message,
      };
    }
  }

  getVNPayErrorMessage(code) {
    const errorMessages = {
      "01": "Giao d·ªãch ch∆∞a ho√†n t·∫•t",
      "02": "Giao d·ªãch b·ªã l·ªói",
      "04": "Giao d·ªãch ƒë·∫£o",
      "05": "VNPAY ƒëang x·ª≠ l√Ω giao d·ªãch n√†y",
      "06": "VNPAY ƒë√£ g·ª≠i y√™u c·∫ßu ho√†n ti·ªÅn",
      "07": "Giao d·ªãch b·ªã nghi ng·ªù gian l·∫≠n",
      "09": "GD Ho√†n tr·∫£ b·ªã t·ª´ ch·ªëi",
      10: "X√°c th·ª±c th·∫ª sai qu√° 3 l·∫ßn",
      11: "ƒê√£ h·∫øt h·∫°n ch·ªù thanh to√°n",
      12: "Th·∫ª/T√†i kho·∫£n b·ªã kh√≥a",
      51: "Kh√¥ng ƒë·ªß s·ªë d∆∞",
      65: "V∆∞·ª£t h·∫°n m·ª©c giao d·ªãch",
      75: "Ng√¢n h√†ng b·∫£o tr√¨",
      79: "Sai m·∫≠t kh·∫©u qu√° quy ƒë·ªãnh",
    };

    return errorMessages[code] || `Thanh to√°n th·∫•t b·∫°i - M√£ l·ªói: ${code}`;
  }

  async testVNPay() {
    try {
      const testOrder = {
        id: 99999,
        MaDonHang: `TEST-${Date.now()}`,
        TongThanhToan: 50000,
      };

      const testPayment = await this.createVNPayPayment(testOrder);

      return {
        success: true,
        message: "VNPay configuration test successful",
        config: {
          vnp_TmnCode: process.env.VNP_TMN_CODE,
          vnp_Url: process.env.VNP_URL,
          vnp_ReturnUrl: process.env.VNP_RETURN_URL,
          vnp_IpnUrl: process.env.VNP_IPN_URL,
          secretKeyLength: (process.env.VNP_HASH_SECRET || "").length,
        },
        testResult: testPayment,
      };
    } catch (error) {
      return {
        success: false,
        message: "VNPay configuration test failed",
        error: error.message,
      };
    }
  }
}

module.exports = new PaymentService();
