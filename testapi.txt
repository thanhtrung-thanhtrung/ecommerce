http://localhost:5000/api/payments/methods
[
    {
        "id": 3,
        "Ten": "Thẻ tín dụng",
        "MoTa": "Thanh toán qua thẻ tín dụng",
        "TrangThai": 1
    },
    {
        "id": 2,
        "Ten": "Chuyển khoản",
        "MoTa": "Chuyển khoản ngân hàng",
        "TrangThai": 1
    },
    {
        "id": 1,
        "Ten": "Tiền mặt",
        "MoTa": "Thanh toán khi nhận hàng",
        "TrangThai": 1
    }
]


http://localhost:5000/api/shipping/methods [
    {
        "id": 1,
        "Ten": "Giao hàng tiêu chuẩn",
        "MoTa": "Giao hàng trong 2-3 ngày",
        "PhiVanChuyen": "30000.00",
        "ThoiGianDuKien": "2-3 ngày",
        "TrangThai": 1
    },
    {
        "id": 2,
        "Ten": "Giao hàng nhanh",
        "MoTa": "Giao hàng trong 1-2 ngày",
        "PhiVanChuyen": "50000.00",
        "ThoiGianDuKien": "1-2 ngày",
        "TrangThai": 1
    },
    {
        "id": 3,
        "Ten": "Giao hàng siêu tốc",
        "MoTa": "Giao hàng trong ngày",
        "PhiVanChuyen": "80000.00",
        "ThoiGianDuKien": "Trong ngày",
        "TrangThai": 1
    },
    {
        "id": 4,
        "Ten": "Giao hàng miễn phí",
        "MoTa": "Miễn phí giao hàng cho đơn hàng trên 1.000.000đ",
        "PhiVanChuyen": "0.00",
        "ThoiGianDuKien": "3-7 ngày",
        "TrangThai": 1
    },
    {
        "id": 5,
        "Ten": "Giao hàng miễn phí",
        "MoTa": "Miễn phí giao hàng cho đơn hàng trên 1.000.000đ",
        "PhiVanChuyen": "0.00",
        "ThoiGianDuKien": "3-7 ngày",
        "TrangThai": 1
    },
    {
        "id": 6,
        "Ten": "Giao hàng miễn phí",
        "MoTa": "Miễn phí giao hàng cho đơn hàng trên 1.000.000đ",
        "PhiVanChuyen": "0.00",
        "ThoiGianDuKien": "3-7 ngày",
        "TrangThai": 1
    },
    {
        "id": 7,
        "Ten": "Giao hàng miễn phí",
        "MoTa": "Miễn phí giao hàng cho đơn hàng trên 1.000.000đ",
        "PhiVanChuyen": "0.00",
        "ThoiGianDuKien": "3-7 ngày",
        "TrangThai": 1
    },
    {
        "id": 8,
        "Ten": "Giao hàng miễn phí",
        "MoTa": "Miễn phí giao hàng cho đơn hàng trên 1.000.000đ",
        "PhiVanChuyen": "0.00",
        "ThoiGianDuKien": "3-7 ngày",
        "TrangThai": 1
    },
    {
        "id": 9,
        "Ten": "Giao hàng miễn phí",
        "MoTa": "Miễn phí giao hàng cho đơn hàng trên 1.000.000đ",
        "PhiVanChuyen": "0.00",
        "ThoiGianDuKien": "3-7 ngày",
        "TrangThai": 1
    },
    {
        "id": 10,
        "Ten": "Giao hàng miễn phí",
        "MoTa": "Miễn phí giao hàng cho đơn hàng trên 1.000.000đ",
        "PhiVanChuyen": "0.00",
        "ThoiGianDuKien": "3-7 ngày",
        "TrangThai": 1
    },
    {
        "id": 11,
        "Ten": "Giao hàng miễn phí",
        "MoTa": "Miễn phí giao hàng cho đơn hàng trên 1.000.000đ",
        "PhiVanChuyen": "0.00",
        "ThoiGianDuKien": "3-7 ngày",
        "TrangThai": 1
    }
]





http://localhost:5000/api/cart 
[
    {
        "id": 31,
        "id_NguoiDung": null,
        "session_id": "tWcv5uiBfQ-n2OBNCGlP38WwEapFK-uB",
        "id_ChiTietSanPham": 1,
        "SoLuong": 1,
        "NgayThem": "2025-06-16T02:35:30.000Z",
        "id_SanPham": 1,
        "tenSanPham": "Nike Air Max 270",
        "HinhAnh": "{\"anhChinh\": \"nike-air-max-270.jpg\", \"anhPhu\": [\"nike-air-max-270-1.jpg\", \"nike-air-max-270-2.jpg\"]}",
        "Gia": "3500000.00",
        "tenKichCo": "36",
        "tenMau": "Đen",
        "SoLuongTon": 10
    }
]

http://localhost:5000/api/cart

{
    "id_ChiTietSanPham": 1,
    "soLuong": 1
  }

  [
    {
        "id": 31,
        "id_NguoiDung": null,
        "session_id": "tWcv5uiBfQ-n2OBNCGlP38WwEapFK-uB",
        "id_ChiTietSanPham": 1,
        "SoLuong": 1,
        "NgayThem": "2025-06-16T02:35:30.000Z",
        "id_SanPham": 1,
        "tenSanPham": "Nike Air Max 270",
        "HinhAnh": "{\"anhChinh\": \"nike-air-max-270.jpg\", \"anhPhu\": [\"nike-air-max-270-1.jpg\", \"nike-air-max-270-2.jpg\"]}",
        "Gia": "3500000.00",
        "tenKichCo": "36",
        "tenMau": "Đen",
        "SoLuongTon": 10
    }
]



http://localhost:5000/api/orders?sessionId=ygAWRDMJEXL50Su8M5EZr9hxRZ00cxNr
{"hoTen": "Test Order Demo", "email": "testdemo@example.com", "diaChiGiao": "123 Demo Street, TP.HCM", "soDienThoai": "0987654321", "id_ThanhToan": 1, "id_VanChuyen": 1, "ghiChu": "Test order demo"}
{
    "id": 2,
    "TongThanhToan": "250000030000.00",
    "message": "Đặt hàng thành công"
}

# =================================================
# TEST API ORDER - SHOES SHOP
# =================================================

# 1. THÊM SẢN PHẨM VÀO GIỎ HÀNG (Guest)
echo "=== 1. THÊM SẢN PHẨM VÀO GIỎ HÀNG ==="
curl -X POST http://localhost:5000/api/cart \
  -H "Content-Type: application/json" \
  -H "X-Session-ID: test-session-guest-001" \
  -d '{
    "id_ChiTietSanPham": 1,
    "soLuong": 2
  }'

echo -e "\n"

# 2. KIỂM TRA GIỎ HÀNG
echo "=== 2. KIỂM TRA GIỎ HÀNG ==="
curl -X GET http://localhost:5000/api/cart \
  -H "X-Session-ID: test-session-guest-001"

echo -e "\n"

# 3. ĐẶT HÀNG CHO KHÁCH VÃNG LAI
echo "=== 3. ĐẶT HÀNG CHO KHÁCH VÃNG LAI ==="
curl -X POST "http://localhost:5000/api/orders?sessionId=test-session-guest-001" \
  -H "Content-Type: application/json" \
  -d '{
    "hoTen": "Nguyễn Văn Test",
    "email": "test@example.com",
    "diaChiGiao": "123 Đường Test, Quận 1, TP.HCM",
    "soDienThoai": "0987654321",
    "id_ThanhToan": 1,
    "id_VanChuyen": 1,
    "ghiChu": "Giao hàng buổi sáng"
  }'

echo -e "\n"

# 4. KIỂM TRA CHI TIẾT ĐỚN HÀNG (ID từ response trên)
echo "=== 4. KIỂM TRA CHI TIẾT ĐỚN HÀNG ==="
curl -X GET http://localhost:5000/api/orders/1

echo -e "\n"

# =================================================
# TEST ĐẶT HÀNG VỚI USER ĐĂNG NHẬP
# =================================================

# 5. ĐĂNG NHẬP USER
echo "=== 5. ĐĂNG NHẬP USER ==="
curl -X POST http://localhost:5000/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{
    "email": "testuser@example.com",
    "matKhau": "123456"
  }'

echo -e "\n"

# 6. THÊM SẢN PHẨM VÀO GIỎ HÀNG (User đã đăng nhập)
echo "=== 6. THÊM SẢN PHẨM VÀO GIỎ HÀNG (USER) ==="
curl -X POST http://localhost:5000/api/cart \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer [REPLACE_WITH_TOKEN]" \
  -d '{
    "id_ChiTietSanPham": 298,
    "soLuong": 1
  }'

echo -e "\n"

# 7. ĐẶT HÀNG CHO USER ĐĂNG NHẬP
echo "=== 7. ĐẶT HÀNG CHO USER ĐĂNG NHẬP ==="
curl -X POST http://localhost:5000/api/orders \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer [REPLACE_WITH_TOKEN]" \
  -d '{
    "hoTen": "User Test",
    "email": "user@example.com",
    "diaChiGiao": "456 User Street, Quận 3, TP.HCM",
    "soDienThoai": "0909090909",
    "id_ThanhToan": 2,
    "id_VanChuyen": 2,
    "MaGiamGia": "WELCOME10",
    "ghiChu": "Giao hàng nhanh"
  }'

echo -e "\n"

# =================================================
# TEST CÁC TÍNH NĂNG KHÁC
# =================================================

# 8. LẤY LỊCH SỬ ĐỚN HÀNG
echo "=== 8. LỊCH SỬ ĐỚN HÀNG ==="
curl -X GET http://localhost:5000/api/orders/history \
  -H "Authorization: Bearer [REPLACE_WITH_TOKEN]"

echo -e "\n"

# 9. HỦY ĐỚN HÀNG
echo "=== 9. HỦY ĐỚN HÀNG ==="
curl -X PUT http://localhost:5000/api/orders/1/cancel \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer [REPLACE_WITH_TOKEN]" \
  -d '{
    "lyDoHuy": "Đổi ý không muốn mua nữa"
  }'

echo -e "\n"

# 10. TRA CỨU ĐỚN HÀNG KHÁCH VÃNG LAI
echo "=== 10. TRA CỨU ĐỚN HÀNG KHÁCH VÃNG LAI ==="
curl -X GET "http://localhost:5000/api/orders/guest/1?email=test@example.com"

echo -e "\n"

# =================================================
# TEST VỚI MÃ GIẢM GIÁ
# =================================================

# 11. THÊM SẢN PHẨM VÀO GIỎ HÀNG (Đơn hàng lớn để test mã giảm giá)
echo "=== 11. THÊM SẢN PHẨM VÀO GIỎ HÀNG (ĐƠN LỚN) ==="
curl -X POST http://localhost:5000/api/cart \
  -H "Content-Type: application/json" \
  -H "X-Session-ID: test-session-large-order" \
  -d '{
    "id_ChiTietSanPham": 298,
    "soLuong": 5
  }'

echo -e "\n"

# 12. ĐẶT HÀNG VỚI MÃ GIẢM GIÁ
echo "=== 12. ĐẶT HÀNG VỚI MÃ GIẢM GIÁ ==="
curl -X POST "http://localhost:5000/api/orders?sessionId=test-session-large-order" \
  -H "Content-Type: application/json" \
  -d '{
    "hoTen": "Khách Hàng VIP",
    "email": "vip@example.com",
    "diaChiGiao": "789 VIP Street, Quận 7, TP.HCM",
    "soDienThoai": "0911111111",
    "id_ThanhToan": 3,
    "id_VanChuyen": 4,
    "MaGiamGia": "WELCOME10",
    "ghiChu": "Khách hàng VIP, giao hàng cẩn thận"
  }'

echo -e "\n"

# =================================================
# HƯỚNG DẪN SỬ DỤNG
# =================================================

echo "=== HƯỚNG DẪN SỬ DỤNG ==="
echo "1. Chạy từng lệnh curl một cách thủ công"
echo "2. Thay thế [REPLACE_WITH_TOKEN] bằng token thực từ response đăng nhập"
echo "3. Kiểm tra response để lấy ID đơn hàng cho các test tiếp theo"
echo "4. Đảm bảo server đang chạy trên port 5000"
echo "5. Database đã có dữ liệu sản phẩm và tồn kho"

# =================================================
# TEST NHANH - CHẠY NGAY LẬP TỨC
# =================================================

echo "=== TEST NHANH - TẠO ĐƠN HÀNG HOÀN CHỈNH ==="

# Bước 1: Thêm sản phẩm vào giỏ
SESSION_ID="quick-test-$(date +%s)"
echo "Session ID: $SESSION_ID"

curl -X POST http://localhost:5000/api/cart \
  -H "Content-Type: application/json" \
  -H "X-Session-ID: $SESSION_ID" \
  -d '{
    "id_ChiTietSanPham": 1,
    "soLuong": 1
  }'

echo -e "\n"

# Bước 2: Đặt hàng ngay lập tức
curl -X POST "http://localhost:5000/api/orders?sessionId=$SESSION_ID" \
  -H "Content-Type: application/json" \
  -d '{
    "hoTen": "Test Nhanh",
    "email": "quicktest@example.com",
    "diaChiGiao": "Test Address",
    "soDienThoai": "0123456789",
    "id_ThanhToan": 1,
    "id_VanChuyen": 1,
    "ghiChu": "Test order"
  }'






import { useEffect, useState } from "react";
import { useParams, useNavigate, Link } from "react-router-dom";
import { useShop } from "../contexts/ShopContext";
import { useCartContext } from "../contexts/CartContext";
import ProductImageGallery from "../components/Product/ProductImageGallery";
import ProductReviews from "../components/Product/ProductReviews";
import RelatedProducts from "../components/Product/RelatedProducts";
import LoadingSpinner from "../components/Common/LoadingSpinner"
import { formatCurrency } from "../utils/helpers";

const ProductDetailPage = () => {
  const { id } = useParams();
  const navigate = useNavigate();

  const {
    currentProduct,
    loading,
    error,
    isAuthenticated,
    wishlist,
    fetchProductById,
    clearCurrentProduct,
    addToWishlist,
    removeFromWishlist,
  } = useShop();

  // Use CartContext for cart operations
  const { addToCart } = useCartContext();

  const [selectedSize, setSelectedSize] = useState("");
  const [selectedColor, setSelectedColor] = useState("");
  const [quantity, setQuantity] = useState(1);
  const [activeTab, setActiveTab] = useState("description");
  const [stock, setStock] = useState(0);

  const isInWishlist = wishlist.some(
    (item) => item.id === Number.parseInt(id)
  );

  // Function to get product images based on available data
  const getProductImages = (hinhAnh, currentProduct) => {
    let images = [];

    // Try to parse HinhAnh first
    if (hinhAnh && typeof hinhAnh === 'string' && hinhAnh.trim() !== '' && hinhAnh !== '{}') {
      try {
        const imageData = JSON.parse(hinhAnh);

        // Add main image
        if (imageData.anhChinh && imageData.anhChinh.trim() !== '') {
          images.push(imageData.anhChinh);
        }

        // Add additional images
        if (imageData.anhPhu && Array.isArray(imageData.anhPhu)) {
          const validAdditionalImages = imageData.anhPhu.filter(img => img && img.trim() !== '');
          images.push(...validAdditionalImages);
        }

        // Add any other images (like anh1, anh2, etc.)
        Object.keys(imageData).forEach(key => {
          if (key.startsWith('anh') && key !== 'anhChinh' && key !== 'anhPhu' && !key.includes('public_id')) {
            if (imageData[key] && imageData[key].trim() !== '' && !images.includes(imageData[key])) {
              images.push(imageData[key]);
            }
          }
        });

        const filteredImages = images.filter(img => img && img.trim() !== '');

        if (filteredImages.length > 0) {
          return filteredImages;
        }
      } catch (error) {
        console.error('❌ Error parsing HinhAnh JSON:', error);
      }
    }

    // Try to use already parsed images from currentProduct
    if (currentProduct && currentProduct.images) {
      if (Array.isArray(currentProduct.images)) {
        images = currentProduct.images.filter(img => img && img.trim() !== '');
      } else if (typeof currentProduct.images === 'object') {
        // Handle object structure similar to above
        if (currentProduct.images.anhChinh) {
          images.push(currentProduct.images.anhChinh);
        }
        if (currentProduct.images.anhPhu && Array.isArray(currentProduct.images.anhPhu)) {
          images.push(...currentProduct.images.anhPhu);
        }
      }

      const filteredImages = images.filter(img => img && img.trim() !== '');
      if (filteredImages.length > 0) {
        return filteredImages;
      }
    }

    // Fallback to placeholder if no images found
    return ["/placeholder.jpg"];
  };

  // Helper function to parse technical specifications
  const parseThongSoKyThuat = (thongSo) => {
    try {
      return typeof thongSo === "string" ? JSON.parse(thongSo) : thongSo || {};
    } catch (error) {
      return {};
    }
  };

  // Helper function to get available sizes from bienThe
  const getAvailableSizes = (bienThe) => {
    if (!bienThe || !Array.isArray(bienThe)) return [];
    return [...new Set(bienThe.map((item) => item.tenKichCo))];
  };

  // Helper function to get available colors from bienThe
  const getAvailableColors = (bienThe) => {
    if (!bienThe || !Array.isArray(bienThe)) return [];
    return [...new Set(bienThe.map((item) => item.tenMau))];
  };

  useEffect(() => {
    if (id) {
      fetchProductById(id);
    }

    return () => {
      clearCurrentProduct();
    };
  }, [id, fetchProductById, clearCurrentProduct]);

  useEffect(() => {
    if (currentProduct && currentProduct.bienThe?.length > 0) {
      const sizes = getAvailableSizes(currentProduct.bienThe);
      const colors = getAvailableColors(currentProduct.bienThe);

      if (sizes.length > 0) {
        setSelectedSize(sizes[0]);
      }
      if (colors.length > 0) {
        setSelectedColor(colors[0]);
      }
    }
  }, [currentProduct]);

  // Cập nhật tồn kho khi thay đổi size/màu
  useEffect(() => {
    if (currentProduct && currentProduct.bienThe?.length > 0 && selectedSize && selectedColor) {
      const selectedVariant = currentProduct.bienThe.find(
        (item) => item.tenKichCo === selectedSize && item.tenMau === selectedColor
      );
      setStock(selectedVariant ? selectedVariant.TonKho || 0 : 0);
      // Nếu số lượng vượt quá tồn kho thì giảm lại
      setQuantity((prev) => selectedVariant && prev > (selectedVariant.TonKho || 0) ? (selectedVariant.TonKho || 1) : prev);
    } else {
      setStock(0);
    }
  }, [currentProduct, selectedSize, selectedColor]);

  const handleAddToCart = async () => {
    if (!selectedSize || !selectedColor) {
      alert("Vui lòng chọn size và màu sắc");
      return;
    }

    // Find the corresponding bienThe (chi tiết sản phẩm)
    const selectedVariant = currentProduct.bienThe?.find(
      (item) => item.tenKichCo === selectedSize && item.tenMau === selectedColor
    );

    if (!selectedVariant) {
      alert("Không tìm thấy sản phẩm với tùy chọn đã chọn");
      return;
    }

    try {
      // Sử dụng đúng cấu trúc dữ liệu theo backend
      const cartItem = {
        id_ChiTietSanPham: selectedVariant.id,
        soLuong: quantity,
      };

      await addToCart(cartItem);
    } catch (error) {
      console.error("Error adding to cart:", error);
    }
  };

  const handleWishlistToggle = () => {
    if (!isAuthenticated) {
      navigate("/login");
      return;
    }

    if (isInWishlist) {
      removeFromWishlist(currentProduct.id);
    } else {
      addToWishlist(currentProduct.id);
    }
  };

  const handleBuyNow = async () => {
    await handleAddToCart();
    navigate("/cart");
  };

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-12">
        <div className="flex justify-center">
          <LoadingSpinner size="lg" />
        </div>
      </div>
    );
  }

  if (error || !currentProduct) {
    return (
      <div className="container mx-auto px-4 py-12 text-center">
        <div className="text-6xl mb-4">😞</div>
        <h1 className="text-2xl font-bold text-gray-800 mb-4">
          Không tìm thấy sản phẩm
        </h1>
        <p className="text-gray-600 mb-6">
          Sản phẩm bạn đang tìm kiếm không tồn tại hoặc đã bị xóa.
        </p>
        <Link to="/products" className="btn-primary">
          Quay lại danh sách sản phẩm
        </Link>
      </div>
    );
  }

  const availableSizes = getAvailableSizes(currentProduct.bienThe);
  const availableColors = getAvailableColors(currentProduct.bienThe);
  const productImages = getProductImages(currentProduct.HinhAnh);
  const specifications = parseThongSoKyThuat(currentProduct.ThongSoKyThuat);

  return (
    <div className="container mx-auto px-4 py-8">
      {/* Breadcrumb */}
      <nav className="flex items-center space-x-2 text-sm text-gray-600 mb-8">
        <Link to="/" className="hover:text-primary-600">
          Trang chủ
        </Link>
        <span>/</span>
        <Link to="/products" className="hover:text-primary-600">
          Sản phẩm
        </Link>
        <span>/</span>
        <span className="text-gray-800">{currentProduct.Ten}</span>
      </nav>

      {/* Product Details */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 mb-16">
        {/* Product Images */}
        <div>
          <ProductImageGallery
            images={productImages}
            productName={currentProduct.Ten}
          />
        </div>

        {/* Product Info */}
        <div className="space-y-6">
          <div>
            <h1 className="text-3xl font-bold text-gray-800 mb-2">
              {currentProduct.Ten}
            </h1>
            <p className="text-gray-600">{currentProduct.tenThuongHieu}</p>
          </div>

          {/* Price */}
          <div className="flex items-center space-x-4">
            {currentProduct.GiaKhuyenMai ? (
              <>
                <span className="text-3xl font-bold text-red-600">
                  {formatCurrency(Number(currentProduct.GiaKhuyenMai))}
                </span>
                <span className="text-xl text-gray-500 line-through">
                  {formatCurrency(Number(currentProduct.Gia))}
                </span>
                <span className="bg-red-100 text-red-600 px-2 py-1 rounded text-sm font-medium">
                  -
                  {Math.round(
                    ((Number(currentProduct.Gia) -
                      Number(currentProduct.GiaKhuyenMai)) /
                      Number(currentProduct.Gia)) *
                    100
                  )}
                  %
                </span>
              </>
            ) : (
              <span className="text-3xl font-bold text-gray-800">
                {formatCurrency(Number(currentProduct.Gia))}
              </span>
            )}
          </div>

          {/* Description */}
          <div>
            <p className="text-gray-700 leading-relaxed">
              {currentProduct.MoTa}
            </p>
          </div>

          {/* Size Selection */}
          {availableSizes.length > 0 && (
            <div>
              <h3 className="font-medium text-gray-800 mb-3">Kích cỡ:</h3>
              <div className="flex flex-wrap gap-2">
                {availableSizes.map((size) => {
                  const isOutOfStock = !currentProduct.bienThe.some(
                    (item) => item.tenKichCo === size && item.TonKho > 0
                  );
                  return (
                    <button
                      key={size}
                      onClick={() => !isOutOfStock && setSelectedSize(size)}
                      className={`px-4 py-2 border rounded-lg font-medium transition-colors ${selectedSize === size
                          ? "border-primary-600 bg-primary-600 text-white"
                          : "border-gray-300 text-gray-700 hover:border-primary-600"
                        } ${isOutOfStock ? "opacity-50 cursor-not-allowed" : ""}`}
                      disabled={isOutOfStock}
                    >
                      {size}
                    </button>
                  );
                })}
              </div>
            </div>
          )}

          {/* Color Selection */}
          {availableColors.length > 0 && (
            <div>
              <h3 className="font-medium text-gray-800 mb-3">Màu sắc:</h3>
              <div className="flex flex-wrap gap-2">
                {availableColors.map((color) => {
                  const isOutOfStock = !currentProduct.bienThe.some(
                    (item) => item.tenMau === color && item.TonKho > 0
                  );
                  return (
                    <button
                      key={color}
                      onClick={() => !isOutOfStock && setSelectedColor(color)}
                      className={`px-4 py-2 border rounded-lg font-medium transition-colors ${selectedColor === color
                          ? "border-primary-600 bg-primary-600 text-white"
                          : "border-gray-300 text-gray-700 hover:border-primary-600"
                        } ${isOutOfStock ? "opacity-50 cursor-not-allowed" : ""}`}
                      disabled={isOutOfStock}
                      
                    >
                      {color}
                    </button>
                  );
                })}
              </div>
            </div>
          )}

          {/* Quantity & Stock */}
          <div>
            <div className="flex items-center justify-between mb-3">
              <h3 className="font-medium text-gray-800">Số lượng:</h3>
              <span className="text-sm text-gray-500">Tồn kho: <span className="font-semibold text-gray-800">{stock}</span></span>
            </div>
            <div className="flex items-center space-x-3">
              <button
                onClick={() => setQuantity(Math.max(1, quantity - 1))}
                className="w-10 h-10 border border-gray-300 rounded-lg flex items-center justify-center hover:border-primary-600"
                disabled={quantity <= 1}
              >
                -
              </button>
              <input
                type="number"
                min={1}
                max={stock}
                value={quantity}
                onChange={e => {
                  let val = Number(e.target.value);
                  if (val > stock) val = stock;
                  if (val < 1) val = 1;
                  setQuantity(val);
                }}
                className="w-16 text-center font-medium border rounded-lg border-gray-300"
                disabled={stock === 0}
              />
              <button
                onClick={() => setQuantity(Math.min(stock, quantity + 1))}
                className="w-10 h-10 border border-gray-300 rounded-lg flex items-center justify-center hover:border-primary-600"
                disabled={quantity >= stock}
              >
                +
              </button>
            </div>
            {stock === 0 && (
              <div className="text-red-500 text-sm mt-2">Sản phẩm này đã hết hàng.</div>
            )}
          </div>

          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-4">
            <button onClick={handleAddToCart} className="btn-primary flex-1" disabled={stock === 0}>
              🛒 Thêm vào giỏ hàng
            </button>
            <button onClick={handleBuyNow} className="btn-secondary flex-1" disabled={stock === 0}>
              Mua ngay
            </button>
            <button
              onClick={handleWishlistToggle}
              className={`px-4 py-2 border rounded-lg transition-colors ${isInWishlist
                ? "border-red-500 bg-red-50 text-red-600"
                : "border-gray-300 text-gray-700 hover:border-red-500 hover:text-red-600"
                }`}
            >
              {isInWishlist ? "❤️" : "🤍"}
            </button>
          </div>

          {/* Product Info */}
          <div className="border-t pt-6">
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span className="text-gray-600">SKU:</span>
                <span className="font-medium">{currentProduct.id}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Danh mục:</span>
                <span className="font-medium">{currentProduct.tenDanhMuc}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Thương hiệu:</span>
                <span className="font-medium">
                  {currentProduct.tenThuongHieu}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-gray-600">Tình trạng:</span>
                <span className="font-medium text-green-600">Còn hàng</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Product Tabs */}
      <div className="mb-16">
        <div className="border-b border-gray-200">
          <nav className="flex space-x-8">
            {["description", "specifications", "reviews"].map((tab) => (
              <button
                key={tab}
                onClick={() => setActiveTab(tab)}
                className={`py-4 px-1 border-b-2 font-medium text-sm ${activeTab === tab
                  ? "border-primary-600 text-primary-600"
                  : "border-transparent text-gray-500 hover:text-gray-700"
                  }`}
              >
                {tab === "description" && "Mô tả"}
                {tab === "specifications" && "Thông số"}
                {tab === "reviews" && "Đánh giá"}
              </button>
            ))}
          </nav>
        </div>

        <div className="py-8">
          {activeTab === "description" && (
            <div className="prose max-w-none">
              <p className="text-gray-700 leading-relaxed">
                {currentProduct.MoTaChiTiet || currentProduct.MoTa}
              </p>
            </div>
          )}

          {activeTab === "specifications" && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-3">
                <h4 className="font-medium text-gray-800">Thông số kỹ thuật</h4>
                <div className="space-y-2 text-sm">
                  {Object.entries(specifications).map(([key, value]) => (
                    <div key={key} className="flex justify-between">
                      <span className="text-gray-600">{key}:</span>
                      <span>{value}</span>
                    </div>
                  ))}
                  {Object.keys(specifications).length === 0 && (
                    <p className="text-gray-500">
                      Thông tin đang được cập nhật
                    </p>
                  )}
                </div>
              </div>
            </div>
          )}

          {activeTab === "reviews" && (
            <ProductReviews productId={currentProduct.id} />
          )}
        </div>
      </div>

      {/* Related Products */}
      <RelatedProducts
        currentProductId={currentProduct.id}
        categoryId={currentProduct.id_DanhMuc}
        relatedProducts={currentProduct.sanPhamLienQuan}
      />
    </div>
  );
};

export default ProductDetailPage;
