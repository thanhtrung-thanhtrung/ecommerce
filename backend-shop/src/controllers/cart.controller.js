const { validationResult } = require("express-validator");
const cartService = require("../services/cart.service");
const { v4: uuidv4 } = require("uuid"); // Add this import for UUID generation

class CartController {
  async getCart(req, res, next) {
    try {
      // Get user ID if logged in
      const userId = req.user?.id || null;

      // Get or create session ID for guests
      let sessionId =
        req.cookies?.sessionId || req.session?.id || req.sessionIdFromHeader;

      // Ki·ªÉm tra header X-Session-ID n·∫øu kh√¥ng c√≥ cookie
      if (!userId && !sessionId) {
        sessionId = req.headers["x-session-id"] || uuidv4();
        // Set the sessionId as a cookie
        res.cookie("sessionId", sessionId, {
          maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
          httpOnly: true,
          secure: process.env.NODE_ENV === "production",
        });
      }

      const cart = await cartService.getCart(userId, sessionId);

      // Return standardized response format
      res.json({
        success: true,
        data: cart,
        message: "L·∫•y gi·ªè h√†ng th√†nh c√¥ng",
      });
    } catch (error) {
      // X·ª≠ l√Ω l·ªói nghi·ªáp v·ª• t·ª´ service
      if (error.message) {
        return res.status(400).json({
          success: false,
          message: error.message,
        });
      }
      next(error); // Chuy·ªÉn l·ªói kh√¥ng x√°c ƒë·ªãnh xu·ªëng middleware x·ª≠ l√Ω l·ªói chung
    }
  }

  async syncSession(req, res, next) {
    try {
      // L·∫•y sessionId t·ª´ header ho·∫∑c cookie
      let sessionId = req.cookies?.sessionId || req.sessionIdFromHeader;
      const headerSessionId = req.headers["x-session-id"];

      if (!sessionId && !headerSessionId) {
        return res.status(400).json({ message: "Kh√¥ng t√¨m th·∫•y session ID" });
      }

      // N·∫øu c√≥ session ID trong header nh∆∞ng kh√¥ng tr√πng v·ªõi cookie,
      // th√¨ s·ª≠ d·ª•ng session ID t·ª´ header
      if (headerSessionId && headerSessionId !== sessionId) {
        sessionId = headerSessionId;
      }

      // Thi·∫øt l·∫≠p cookie v·ªõi session ID
      res.cookie("sessionId", sessionId, {
        maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
        httpOnly: true,
        secure: process.env.NODE_ENV === "production",
      });

      // L·∫•y th√¥ng tin gi·ªè h√†ng theo session ID
      const cart = await cartService.getCart(null, sessionId);
      res.json(cart);
    } catch (error) {
      if (error.message) {
        return res.status(400).json({ message: error.message });
      }
      next(error);
    }
  }

  async createSession(req, res, next) {
    try {
      // T·∫°o m·ªõi session ID
      const sessionId = uuidv4();

      // Thi·∫øt l·∫≠p cookie v·ªõi session ID m·ªõi
      res.cookie("sessionId", sessionId, {
        maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
        httpOnly: true,
        secure: process.env.NODE_ENV === "production",
      });

      // Tr·∫£ v·ªÅ session ID m·ªõi
      res.json({ sessionId });
    } catch (error) {
      if (error.message) {
        return res.status(400).json({ message: error.message });
      }
      next(error);
    }
  }

  async syncAfterLogin(req, res, next) {
    try {
      // ƒê·∫£m b·∫£o ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p
      const userId = req.user?.id;
      if (!userId) {
        return res.status(401).json({ message: "Ch∆∞a ƒëƒÉng nh·∫≠p" });
      }

      // L·∫•y session ID t·ª´ cookie, session, ho·∫∑c header
      let sessionId =
        req.cookies?.sessionId || req.session?.id || req.sessionIdFromHeader;
      if (!sessionId) {
        sessionId = req.headers["x-session-id"];
      }

      // N·∫øu kh√¥ng c√≥ session ID, kh√¥ng c·∫ßn ƒë·ªìng b·ªô
      if (!sessionId) {
        return res
          .status(400)
          .json({ message: "Kh√¥ng t√¨m th·∫•y session ID ƒë·ªÉ ƒë·ªìng b·ªô" });
      }

      // G·ªçi service ƒë·ªÉ g·ªôp gi·ªè h√†ng
      const cart = await cartService.mergeCart(userId, sessionId);

      // X√≥a cookie sessionId v√¨ ƒë√£ ƒëƒÉng nh·∫≠p v√† ƒë√£ g·ªôp gi·ªè h√†ng
      res.clearCookie("sessionId");

      res.json(cart);
    } catch (error) {
      if (error.message) {
        return res.status(400).json({ message: error.message });
      }
      next(error);
    }
  }

  async addToCart(req, res, next) {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          success: false,
          errors: errors.array(),
        });
      }

      const userId = req.user?.id || null;
      // L·∫•y sessionId t·ª´ cookie, session, header (kh√¥ng l·∫•y t·ª´ body)
      let sessionId =
        req.cookies?.sessionId ||
        req.session?.id ||
        req.sessionIdFromHeader ||
        req.headers["x-session-id"];

      // Ensure sessionId is created for guests
      if (!userId && !sessionId) {
        sessionId = uuidv4();
        res.cookie("sessionId", sessionId, {
          maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
          httpOnly: true,
          secure: process.env.NODE_ENV === "production",
        });
      }

      // L·∫•y ƒë√∫ng t√™n tr∆∞·ªùng t·ª´ body
      const { id_ChiTietSanPham, SoLuong } = req.body;

      // Debugging logs
      console.log("üîç Debug - sessionId:", sessionId);
      console.log("üîç Debug - Adding to cart:", { id_ChiTietSanPham, SoLuong });

      if (!id_ChiTietSanPham || !SoLuong) {
        return res.status(400).json({
          success: false,
          message: "Thi·∫øu th√¥ng tin s·∫£n ph·∫©m ho·∫∑c s·ªë l∆∞·ª£ng.",
        });
      }

      const cart = await cartService.addToCart(
        { id_ChiTietSanPham, SoLuong },
        userId,
        sessionId
      );

      res.status(200).json({
        success: true,
        data: cart,
        message: "Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng",
      });
    } catch (error) {
      console.error("L·ªói khi th√™m v√†o gi·ªè h√†ng:", error);
      res.status(500).json({
        success: false,
        message: error.message || "L·ªói khi th√™m v√†o gi·ªè h√†ng",
      });
    }
  }

  async updateCart(req, res, next) {
    try {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({
          success: false,
          errors: errors.array(),
        });
      }

      const { maGioHang } = req.params;
      const { SoLuong } = req.body;
      const userId = req.user?.id || null;

      // Ki·ªÉm tra t·∫•t c·∫£ v·ªã tr√≠ c√≥ th·ªÉ ch·ª©a sessionId
      let sessionId =
        req.cookies?.sessionId || req.session?.id || req.sessionIdFromHeader;
      if (!userId && !sessionId) {
        sessionId = req.headers["x-session-id"];
      }

      if (!maGioHang || !SoLuong) {
        return res.status(400).json({
          success: false,
          message: "Thi·∫øu m√£ gi·ªè h√†ng ho·∫∑c s·ªë l∆∞·ª£ng.",
        });
      }

      if (!userId && !sessionId) {
        return res.status(400).json({
          success: false,
          message:
            "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng ho·∫∑c session ƒë·ªÉ c·∫≠p nh·∫≠t gi·ªè h√†ng.",
        });
      }

      const cart = await cartService.updateCart(
        maGioHang,
        SoLuong,
        userId,
        sessionId
      );

      res.json({
        success: true,
        data: cart,
        message: "C·∫≠p nh·∫≠t gi·ªè h√†ng th√†nh c√¥ng",
      });
    } catch (error) {
      // X·ª≠ l√Ω l·ªói nghi·ªáp v·ª• t·ª´ service
      if (error.message) {
        return res.status(400).json({
          success: false,
          message: error.message,
        });
      }
      next(error);
    }
  }

  async removeFromCart(req, res, next) {
    try {
      const { maGioHang } = req.params;
      const userId = req.user?.id || null;

      // Ki·ªÉm tra t·∫•t c·∫£ v·ªã tr√≠ c√≥ th·ªÉ ch·ª©a sessionId
      let sessionId =
        req.cookies?.sessionId || req.session?.id || req.sessionIdFromHeader;
      if (!userId && !sessionId) {
        sessionId = req.headers["x-session-id"];
      }

      if (!maGioHang) {
        return res.status(400).json({
          success: false,
          message: "Thi·∫øu m√£ gi·ªè h√†ng.",
        });
      }

      if (!userId && !sessionId) {
        return res.status(400).json({
          success: false,
          message:
            "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng ho·∫∑c session ƒë·ªÉ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng.",
        });
      }

      const cart = await cartService.removeFromCart(
        maGioHang,
        userId,
        sessionId
      );

      res.json({
        success: true,
        data: cart,
        message: "X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng th√†nh c√¥ng",
      });
    } catch (error) {
      // X·ª≠ l√Ω l·ªói nghi·ªáp v·ª• t·ª´ service
      if (error.message) {
        return res.status(400).json({
          success: false,
          message: error.message,
        });
      }
      next(error);
    }
  }

  async clearCart(req, res, next) {
    try {
      const userId = req.user?.id || null;

      // Ki·ªÉm tra t·∫•t c·∫£ v·ªã tr√≠ c√≥ th·ªÉ ch·ª©a sessionId
      let sessionId =
        req.cookies?.sessionId || req.session?.id || req.sessionIdFromHeader;
      if (!userId && !sessionId) {
        sessionId = req.headers["x-session-id"];
      }

      if (!userId && !sessionId) {
        return res.status(400).json({
          success: false,
          message:
            "Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng ho·∫∑c session ƒë·ªÉ x√≥a gi·ªè h√†ng.",
        });
      }

      await cartService.clearCart(userId, sessionId);

      res.json({
        success: true,
        message: "ƒê√£ x√≥a gi·ªè h√†ng",
      });
    } catch (error) {
      // X·ª≠ l√Ω l·ªói nghi·ªáp v·ª• t·ª´ service
      if (error.message) {
        return res.status(400).json({
          success: false,
          message: error.message,
        });
      }
      next(error);
    }
  }

  async mergeCart(req, res, next) {
    try {
      const userId = req.user?.id; // Merge cart ch·ªâ d√†nh cho user ƒë√£ ƒëƒÉng nh·∫≠p

      // Ki·ªÉm tra t·∫•t c·∫£ v·ªã tr√≠ c√≥ th·ªÉ ch·ª©a sessionId
      let sessionId =
        req.cookies?.sessionId || req.session?.id || req.sessionIdFromHeader;
      if (!sessionId) {
        sessionId = req.headers["x-session-id"];
      }

      if (!userId) {
        return res
          .status(401)
          .json({ message: "Ch·ª©c nƒÉng n√†y y√™u c·∫ßu ƒëƒÉng nh·∫≠p." });
      }

      if (!sessionId) {
        return res
          .status(400)
          .json({ message: "Kh√¥ng t√¨m th·∫•y session ƒë·ªÉ g·ªôp gi·ªè h√†ng." });
      }

      const cart = await cartService.mergeCart(userId, sessionId);

      // X√≥a cookie sessionId sau khi g·ªôp gi·ªè h√†ng th√†nh c√¥ng
      res.clearCookie("sessionId");

      res.json(cart);
    } catch (error) {
      // X·ª≠ l√Ω l·ªói nghi·ªáp v·ª• t·ª´ service
      if (error.message) {
        return res.status(400).json({ message: error.message });
      }
      next(error);
    }
  }
}

module.exports = new CartController();
